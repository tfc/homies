filetype plugin on
filetype indent on

let mapleader   = ","
let g:mapleader = ","

nmap <leader>w :w!<cr>

set ai " auto indent
set autoread
set backspace=eol,start,indent
set cmdheight=2
set colorcolumn=80
set confirm
set encoding=utf8
set expandtab
set exrc
set ffs=unix,dos,mac
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2 " Airline Plugin settings
set lazyredraw
set linebreak   "wrap lines at convenient points
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
set mouse=a
set nobackup
set nocompatible
set noerrorbells
set nofoldenable
set noswapfile
set novisualbell
set nowb
set number
set ruler
set secure
set shiftwidth=2
set showcmd     "show incomplete cmds down the bottom
set showmatch
set showmode    "show current mode down the bottom
set si " smart indent
set smartcase
set smarttab
set t_vb=
set tabstop=2
set tm=500
set tw=500
set wildignore=*.o,*~,*.pyc
set wildmenu
set wrap "wrap lines
set wrap " wrap lines
set wildmode=longest,list,full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set completeopt+=longest
set t_Co=256
set guioptions-=m "remove menu
set guioptions-=T "remove toolbar
set guioptions-=r "remove scroll bar right
set guioptions-=L "remove scroll bar left

syntax enable

set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1
colorscheme solarized

" move around panes with h,j,k,l
nnoremap <C-k> :wincmd k <CR>
nnoremap <C-l> :wincmd l <CR>
nnoremap <C-h> :wincmd h <CR>
nnoremap <C-j> :wincmd j <CR>

" Bufferlist Plugin settings
let g:BufferListWidth = 50
let g:BufferListMaxWidth = 50
map <silent> <F4> :call BufferList()<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler_options = ' -std=c++14 -I/usr/include/c++/4.2.1/'
let g:syntastic_python_checkers=['pylint']

map <C-]> :YcmCompleter GoToImprecise<CR>

" Configure browser for haskell_doc.vim
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

autocmd BufEnter *.hs set formatprg=stylish-haskell

autocmd FileType c,cpp,haskell,bash,python,txt,nix autocmd BufWritePre <buffer> %s/\s\+$//e

autocmd FileType html setlocal shiftwidth=2 tabstop=2


"nerdtree settings
map <Leader>n :NERDTreeToggle<CR>

let g:NERDTreeDirArrows = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMouseMode = 2
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeWinSize = 60
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif
